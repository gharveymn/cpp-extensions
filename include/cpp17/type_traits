/** type_traits
 * Imported C++17 definitions for <type_traits>.
 * 
 * Copyright Â© 2019 Gene Harvey
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file for details.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef CPP_EXTENSIONS_TYPE_TRAITS
#define CPP_EXTENSIONS_TYPE_TRAITS

#include <type_traits>
#include <utility>

namespace cpp17
{
  
  ///
  /// bool_constant
  ///
  
  template <bool B>
  using bool_constant = std::integral_constant<bool, B>;
  
  ///
  /// negation
  ///
  
  template<typename B>
  struct negation : bool_constant<! bool (B::value)>
  { };
  
  namespace detail
  {
    template <typename...>
    struct conjunction : std::true_type
    { };
  
    template <typename B>
    struct conjunction<B> : B
    { };
  
    template <typename B, typename ...Bs>
    struct conjunction<B, Bs...>
      : std::conditional<B::value, conjunction<Bs...>, B>::type
    { };
  
    template <typename...>
    struct disjunction : std::false_type
    { };
  
    template <typename B>
    struct disjunction<B> : B
    { };
  
    template <typename B, typename... Bs>
    struct disjunction<B, Bs...>
      : std::conditional<B::value, B, disjunction<Bs...>>::type
    { };
  }
  
  ///
  /// conjunction
  ///
  
  template <typename ...Bs>
  struct conjunction : detail::conjunction<Bs...>
  { };
  
  ///
  /// disjunction
  ///
  
  template <typename ...Bs>
  struct disjunction : detail::disjunction<Bs...>
  { };
  
  ///
  /// void_t
  ///
  
  template <class...>
  using void_t = void;
  
  namespace detail 
  {
    template <class T>
    struct is_reference_wrapper : std::false_type 
    { };
    
    template <class U>
    struct is_reference_wrapper<std::reference_wrapper<U>> : std::true_type 
    { };
    
    template<class T>
    struct invoke_impl 
    {
      template<class F, class ...Args>
      static auto call(F&& f, Args&&... args) -> decltype (
                            std::forward<F> (f)(std::forward<Args> (args)...));
    };
  
    template<class B, class MT>
    struct invoke_impl<MT B::*> 
    {
      template<typename T, typename Td = typename std::decay<T>::type,
          class = typename std::enable_if<std::is_base_of<B, Td>::value>::type>
      static auto get (T&& t) -> T&&;
    
      template<typename T, typename Td = typename std::decay<T>::type,
        class = typename std::enable_if<is_reference_wrapper<Td>::value>::type>
      static auto get (T&& t) -> decltype (t.get ());
    
      template<typename T, typename Td = typename std::decay<T>::type,
        class = typename std::enable_if<!std::is_base_of<B, Td>::value>::type,
        class = typename std::enable_if<!is_reference_wrapper<Td>::value>::type>
      static auto get(T&& t) -> decltype (*std::forward<T> (t));
    
      template<typename T, typename... Args, typename MT1,
           class = typename std::enable_if<std::is_function<MT1>::value>::type>
      static auto call(MT1 B::*pmf, T&& t, Args&&... args) -> decltype (
                                 (invoke_impl::get (std::forward<T> (t)).*pmf)(
                                   std::forward<Args> (args)...));
    
      template<typename T>
      static auto call(MT B::*pmd, T&& t) -> decltype (
                                  invoke_impl::get (std::forward<T> (t)).*pmd);
    };
  
    template<typename F, typename ...Args, 
             typename Fd = typename std::decay<F>::type>
    auto invoke (F&& f, Args&&... args) -> decltype (
       invoke_impl<Fd>::call(std::forward<F>(f), std::forward<Args>(args)...));
    
    template <typename Void, typename, typename...>
    struct invoke_result 
    { };
    
    template <typename F, typename ...Args>
    struct invoke_result<decltype (void (detail::invoke (
                                           std::declval<F> (), 
                                           std::declval<Args> ()...))),
                         F, Args...> 
    {
      using type = decltype (detail::invoke (std::declval<F> (),
                                             std::declval<Args> ()...));
    };
  }
  
  ///
  /// invoke_result
  ///
  
  template <typename F, typename ...ArgTypes>
  struct invoke_result : detail::invoke_result<void, F, ArgTypes...>
  { };
  
  ///
  /// invoke_result_t
  ///
  
  template <typename F, typename ...ArgTypes>
  using invoke_result_t = typename invoke_result<F, ArgTypes...>::type;
  
  namespace detail
  {
    
    using std::swap;
    
    template <class T, class U, class Enable = void>
    struct is_swappable_with : std::false_type
    { };
  
    template <class T, class U>
    struct is_swappable_with<T, U, cpp17::void_t<
                     decltype (swap (std::declval<T> (), std::declval<U> ())),
                     decltype (swap (std::declval<U> (), std::declval<T> ()))>>
      : std::true_type        
    { };
  
    template <class T>
    struct is_swappable_with<T, T, 
                    decltype (swap (std::declval<T&> (), std::declval<T&> ()))>
      : std::true_type
    { };
  
    template <class T, class U, class Enable = void>
    struct is_nothrow_swappable_with : std::false_type
    { };
  
    template <class T, class U>
    struct is_nothrow_swappable_with<T, U, typename std::enable_if<
               noexcept (swap (std::declval<T> (), std::declval<U> ()))
            && noexcept (swap (std::declval<U> (), std::declval<T> ()))>::type>
      : std::true_type
    { };
  
    template <class T>
    struct is_nothrow_swappable_with<T, T, typename std::enable_if<
               noexcept (swap (std::declval<T> (), std::declval<T> ()))>::type>
      : std::true_type
    { };
    
  }
  
  template <class T, class U>
  struct is_swappable_with : detail::is_swappable_with<T, U>
  { };
  
  template <class T>
  struct is_swappable : is_swappable_with<T, T>
  { };
  
  template <class T, class U>
  struct is_nothrow_swappable_with : detail::is_nothrow_swappable_with<T, U>
  { };
  
  template <class T>
  struct is_nothrow_swappable : is_nothrow_swappable_with<T, T>
  { };
  
  namespace detail
  {
    template <typename Result, typename Return, typename = void>
    struct is_invocable : std::false_type 
    { };
  
    template <typename Result, typename Return>
    struct is_invocable<Result, Return, cpp17::void_t<Result>>
      : cpp17::disjunction<std::is_void<Return>, 
                           std::is_convertible<Result, Return>
                          >::type
    { };
  
    template <typename Tp>
    static void test_noexcept (Tp) noexcept;
  
    template <bool IsInvokable, bool IsCVVoid, 
              typename Return, typename F, typename ...ArgTypes>
    struct is_nothrow_invocable_r : std::false_type
    { };
  
    template <class Return, class F, class ...ArgTypes>
    struct is_nothrow_invocable_r<true, false, Return, F, ArgTypes...>
      : cpp17::bool_constant<noexcept (detail::test_noexcept<Return>(
           detail::invoke (std::declval<F> (), std::declval<ArgTypes> ()...)))>
    { };
  
    template <class Return, class F, class ...ArgTypes>
    struct is_nothrow_invocable_r<true, true, Return, F, ArgTypes...>
      : cpp17::bool_constant<noexcept (detail::invoke (
                            std::declval<F> (), std::declval<ArgTypes> ()...))>
    { };
    
  }
  
  template <class Return, class F, class ...ArgTypes>
  struct is_invocable_r
    : detail::is_invocable<cpp17::invoke_result_t<F, ArgTypes...>, Return>
  { };
  
  template <class F, class ...ArgTypes>
  struct is_invocable : is_invocable_r<void, F, ArgTypes...>
  { };
  
  template <class Return, class F, class ...ArgTypes>
  struct is_nothrow_invocable_r 
    : detail::is_nothrow_invocable_r<
        is_invocable_r<Return, F, ArgTypes...>::type, 
        std::is_void<Return>::value, 
        Return, F, ArgTypes...>
  { };
  
  template <class F, class ...ArgTypes>
  struct is_nothrow_invocable : is_nothrow_invocable_r<void, F, ArgTypes...>
  { };
  
//  : cpp17::conjunction<detail::is_invocable<
//                           cpp17::invoke_result_t<F, ArgTypes...>, void>,
}

#endif
