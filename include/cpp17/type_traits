/** type_traits
 * Imported C++17 definitions for <type_traits>.
 * 
 * Copyright Â© 2019 Gene Harvey
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file for details.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef CPP17_TYPE_TRAITS
#define CPP17_TYPE_TRAITS

#include <type_traits>
#include <utility>

namespace cpp17
{
  
  ///
  /// bool_constant
  ///
  
  template <bool B>
  using bool_constant = std::integral_constant<bool, B>;
  
  ///
  /// negation
  ///
  
  template<typename B>
  struct negation : bool_constant<! bool (B::value)>
  { };
  
  namespace detail
  {
    template <typename...>
    struct conjunction : std::true_type
    { };
  
    template <typename B>
    struct conjunction<B> : B
    { };
  
    template <typename B, typename ...Bs>
    struct conjunction<B, Bs...>
      : std::conditional<B::value, conjunction<Bs...>, B>::type
    { };
  
    template <typename...>
    struct disjunction : std::false_type
    { };
  
    template <typename B>
    struct disjunction<B> : B
    { };
  
    template <typename B, typename... Bs>
    struct disjunction<B, Bs...>
      : std::conditional<B::value, B, disjunction<Bs...>>::type
    { };
  }
  
  ///
  /// conjunction
  ///
  
  template <typename ...Bs>
  struct conjunction : detail::conjunction<Bs...>
  { };
  
  ///
  /// disjunction
  ///
  
  template <typename ...Bs>
  struct disjunction : detail::disjunction<Bs...>
  { };
  
  ///
  /// void_t
  ///
  
  template <class...>
  using void_t = void;
  
  namespace detail 
  {
    template <class T>
    struct is_reference_wrapper_impl 
      : std::false_type 
    { };
    
    template <class U>
    struct is_reference_wrapper_impl<std::reference_wrapper<U>> 
      : std::true_type
    { };
    
    
    template <class U>
    struct is_reference_wrapper 
      : detail::is_reference_wrapper_impl<typename std::remove_cv<U>::type> 
    { };
    
    template<class T>
    struct invoke_impl 
    {
      // 7
      template<class F, class ...Args>
      static auto call(F&& f, Args&&... args) noexcept (
        noexcept (
          std::forward<F> (f)(std::forward<Args> (args)...)))
        -> decltype (
          std::forward<F> (f)(std::forward<Args> (args)...))
      {
        return std::forward<F> (f)(std::forward<Args> (args)...);
      }
    };
  
    template<class B, class MT>
    struct invoke_impl<MT B::*> 
    {
      
      // 1, 3
      template <typename T, typename Td = typename std::decay<T>::type,
          class = typename std::enable_if<std::is_base_of<B, Td>::value>::type>
      static auto get (T&& t) noexcept (noexcept (std::forward<T> (t))) 
                              -> decltype (std::forward<T> (t))
      {
        return std::forward<T> (t);        
      }
    
      // 2, 4
      template <typename T, typename Td = typename std::decay<T>::type,
        class = typename std::enable_if<is_reference_wrapper<Td>::value>::type>
      static auto get (T&& t) noexcept (noexcept (t.get ()))
                              -> decltype (t.get ())
      {
        return t.get ();                        
      }
    
      // 3,6
      template <typename T, typename Td = typename std::decay<T>::type,
        class = typename std::enable_if<!std::is_base_of<B, Td>::value>::type,
        class = typename std::enable_if<!is_reference_wrapper<Td>::value>::type>
      static auto get (T&& t) noexcept (noexcept (*std::forward<T> (t)))
                              -> decltype (*std::forward<T> (t))
      {
        return *std::forward<T> (t);
      }
    
      // 1, 2, 3
      template <typename T, typename... Args, typename MT1,
           class = typename std::enable_if<std::is_function<MT1>::value>::type>
      static auto call (MT1 B::*pmf, T&& t, Args&&... args) noexcept (
        noexcept (
          (invoke_impl::get (std::forward<T> (t)).*pmf)(
                                                std::forward<Args> (args)...))) 
        -> decltype (
          (invoke_impl::get (std::forward<T> (t)).*pmf)(
                                                std::forward<Args> (args)...))
      {
        return (invoke_impl::get (std::forward<T> (t)).*pmf)(
                                                std::forward<Args> (args)...);  
      }
    
      // 4, 5, 6
      template <typename T>
      static auto call (MT B::*pmd, T&& t) noexcept (
        noexcept (
          invoke_impl::get (std::forward<T> (t)).*pmd)) 
        -> decltype (
          invoke_impl::get (std::forward<T> (t)).*pmd)
      {
        return invoke_impl::get (std::forward<T> (t)).*pmd;
      }
    };
  
    template<typename F, typename ...Args, 
             typename Fd = typename std::decay<F>::type>
    inline auto invoke (F&& f, Args&&... args) noexcept (
      noexcept (
       invoke_impl<Fd>::call(std::forward<F> (f), 
                             std::forward<Args> (args)...))) 
      -> decltype (
       invoke_impl<Fd>::call(std::forward<F> (f), 
                             std::forward<Args> (args)...))
    {
      return invoke_impl<Fd>::call(std::forward<F> (f),
                                   std::forward<Args> (args)...);
    }
    
    template <typename Void, typename, typename...>
    struct invoke_result 
    { };
    
    template <typename F, typename ...Args>
    struct invoke_result<cpp17::void_t<decltype (detail::invoke (
                               std::declval<F> (), std::declval<Args> ()...))>,
                         F, Args...>
    {
      using type = decltype (detail::invoke (std::declval<F> (),
                                             std::declval<Args> ()...));
    };
  
//    struct __nat
//    {
//      __nat() = delete;
//      __nat(const __nat&) = delete;
//      __nat& operator=(const __nat&) = delete;
//      ~__nat() = delete;
//    };
    
    // __invokable
//    template <class _Ret, class _Fp, class ..._Args>
//    struct __invokable_r
//    {
//      template <class _XFp, class ..._XArgs>
//      static auto __try_call(int) -> decltype(
//      detail::invoke(std::declval<_XFp>(), std::declval<_XArgs>()...));
//      template <class _XFp, class ..._XArgs>
//      static __nat __try_call(...);
//    
//      // FIXME: Check that _Ret, _Fp, and _Args... are all complete types, cv void,
//      // or incomplete array types as required by the standard.
//      using _Result = decltype(__try_call<_Fp, _Args...>(0));
//    
//      using type =
//      typename std::conditional<
//        ! std::is_same<_Result, __nat>::value,
//        typename std::conditional<
//          std::is_void<_Ret>::value,
//          std::true_type,
//          std::is_convertible<_Result, _Ret>
//                          >::type,
//          std::false_type
//      >::type;
//      static const bool value = type::value;
//    };
//    template <class _Fp, class ..._Args>
//    using __invokable = __invokable_r<void, _Fp, _Args...>;
    
  }
  
  ///
  /// invoke_result
  ///
  
  template <typename F, typename ...ArgTypes>
  struct invoke_result : detail::invoke_result<void, F, ArgTypes...>
  { };
  
  ///
  /// invoke_result_t
  ///
  
  template <typename F, typename ...ArgTypes>
  using invoke_result_t = typename invoke_result<F, ArgTypes...>::type;
  
  namespace detail
  {
    template <typename T, typename U, typename Enable = void>
    struct eval_is_swappable_with;
  
    template <typename T, typename U>
    struct eval_is_swap_nothrow;

    template <typename T, 
              typename = typename std::enable_if<
                cpp17::conjunction<std::is_move_constructible<T>,
                                   std::is_move_assignable<T>>::value>::type>
    inline void swap(T&, T&) noexcept (
      cpp17::conjunction<std::is_nothrow_move_constructible<T>, 
                         std::is_nothrow_move_assignable<T>>::value);
  
    template <typename T, std::size_t Size, 
              typename = typename std::enable_if<
                                    eval_is_swappable_with<T, T>::value>::type>
    inline void swap(T (&)[Size], T (&)[Size]) noexcept (
                                            eval_is_swap_nothrow<T, T>::value);
  
    template <typename T, typename U, typename Enable>
    struct eval_is_swappable_with : std::false_type
    { };
  
    template <typename T, typename U>
    struct eval_is_swappable_with<T, U, cpp17::void_t<
                     decltype (swap (std::declval<T> (), std::declval<U> ()))>> 
      : std::true_type
    { };
    
    template <typename T, typename U>
    struct eval_is_swap_nothrow
      : cpp17::bool_constant<noexcept (swap (std::declval<T> (), 
                                             std::declval<U> ()))>
    { };
  
    template <typename T, typename U>
    struct eval_is_nothrow_swappable_with 
      : cpp17::conjunction<eval_is_swappable_with<T, U>, 
                           eval_is_swap_nothrow<T, U>>
    { };
  
//    template <typename T, typename U>
//    struct eval_is_nothrow_swappable_with<T, U, typename std::enable_if<
//               noexcept (swap (std::declval<T> (), std::declval<U> ()))>::type>
//      : std::true_type
//    { };

    template <class T, class U>
    struct is_swappable_with 
      : cpp17::conjunction<detail::eval_is_swappable_with<T, U>, 
                           detail::eval_is_swappable_with<U, T>>
    { };
    
    template <class T>
    struct is_swappable_with<T, T>
      : detail::eval_is_swappable_with<T, T>
    { };
    
    template <class T, class U>
    struct is_nothrow_swappable_with
      : cpp17::conjunction<detail::eval_is_nothrow_swappable_with<T, U>,
                           detail::eval_is_nothrow_swappable_with<U, T>>
    { };
    
    template <class T>
    struct is_nothrow_swappable_with<T, T>
      : detail::eval_is_nothrow_swappable_with<T, T>
    { };
  }
  
  template <class T, class U>
  struct is_swappable_with : detail::is_swappable_with<T, U>
  { };
  
  template <class T>
  struct is_swappable 
    : is_swappable_with<typename std::add_lvalue_reference<T>::type, 
                        typename std::add_lvalue_reference<T>::type>
  { };
  
  template <class T, class U>
  struct is_nothrow_swappable_with : detail::is_nothrow_swappable_with<T, U>
  { };
  
  template <class T>
  struct is_nothrow_swappable 
    : is_nothrow_swappable_with<typename std::add_lvalue_reference<T>::type,
                                typename std::add_lvalue_reference<T>::type>
  { };
  
  namespace detail
  {
    template <typename Result, typename Return, typename = void>
    struct is_invocable : std::false_type 
    { };
  
    template <typename Result, typename Return>
    struct is_invocable<Result, Return, cpp17::void_t<typename Result::type>>
      : cpp17::disjunction<std::is_void<Return>, 
                           std::is_convertible<typename Result::type, Return>>
    { };
  
    template <typename Tp>
    static void test_noexcept (Tp) noexcept;
  
    template <bool IsInvokable, bool IsCVVoid, 
              typename Return, typename F, typename ...ArgTypes>
    struct is_nothrow_invocable_r : std::false_type
    { };
  
    template <class Return, class F, class ...ArgTypes>
    struct is_nothrow_invocable_r<true, false, Return, F, ArgTypes...>
      : cpp17::bool_constant<noexcept (detail::test_noexcept<Return> (
           detail::invoke (std::declval<F> (), std::declval<ArgTypes> ()...)))>
    { };
  
    template <class Return, class F, class ...ArgTypes>
    struct is_nothrow_invocable_r<true, true, Return, F, ArgTypes...>
      : cpp17::bool_constant<noexcept (detail::invoke (
                            std::declval<F> (), std::declval<ArgTypes> ()...))>
    { };
    
  }
  
  template <class Return, class F, class ...ArgTypes>
  struct is_invocable_r
    : detail::is_invocable<cpp17::invoke_result<F, ArgTypes...>, Return>
  { };

  template <class F, class ...ArgTypes>
  struct is_invocable : is_invocable_r<void, F, ArgTypes...>
  { };
  
  template <class Return, class F, class ...ArgTypes>
  struct is_nothrow_invocable_r 
    : detail::is_nothrow_invocable_r<
        is_invocable_r<Return, F, ArgTypes...>::value, 
        std::is_void<Return>::value, 
        Return, F, ArgTypes...>
  { };
  
  template <class F, class ...ArgTypes>
  struct is_nothrow_invocable : is_nothrow_invocable_r<void, F, ArgTypes...>
  { };
  
}

#endif
