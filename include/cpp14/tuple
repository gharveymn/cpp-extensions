/** tuple.h
 * Imported C++14 definitions for <tuple>.
 * 
 * Copyright Â© 2019 Gene Harvey
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file for details.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef CPP14_TUPLE
#define CPP14_TUPLE

#include <tuple>

namespace cpp14
{
  
  namespace detail
  {
  
//    template <std::size_t Idx, typename T, typename ...Rest>
//    struct get_index_helper
//    { };
  
    template <std::size_t Idx, typename T, typename Head, typename ...Tail>
    struct get_index_helper
      : get_index_helper<Idx + 1, T, Tail...>
    { };
    
    template <std::size_t Idx, typename T, typename ...Tail>
    struct get_index_helper<Idx, T, T, Tail...> 
      : std::integral_constant<std::size_t, Idx>
    { };
  
    template <std::size_t Idx, typename T>
    struct get_index_helper<Idx, T, T>
      : std::integral_constant<std::size_t, Idx>
    { };
  
    template <std::size_t Idx, typename T, typename NotT>
    struct get_index_helper<Idx, T, NotT>
    { 
      static_assert (std::is_same<T, NotT>::value, "type not found");
    };
    
    template <typename T, typename ...Ts>
    struct get_index : get_index_helper<0, T, Ts...>
    { };
    
    template <typename T>
    struct get_index<T>
    { 
      static_assert (! std::is_same<T, T>::value, 
                     "type not in empty type list");
    };
  }
  
  template <class T, class ...Ts>
  constexpr T& get (std::tuple<Ts...>& t) noexcept
  {
    return std::get<detail::get_index<T, Ts...>::value> (t);
  }
  
  template <class T, class ...Ts>
  constexpr T&& get (std::tuple<Ts...>&& t) noexcept
  {
    return std::get<detail::get_index<T, Ts...>::value> (std::move (t));
  }
  
  template <class T, class ...Ts>
  constexpr const T& get (const std::tuple<Ts...>& t) noexcept
  {
    return std::get<detail::get_index<T, Ts...>::value> (t);
  }
  
  template <class T, class ...Ts>
  constexpr const T&& get (const std::tuple<Ts...>&& t) noexcept
  {
    return std::get<detail::get_index<T, Ts...>::value> (std::move (t));
  }
  
}

#endif
