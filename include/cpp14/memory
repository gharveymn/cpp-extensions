/** memory.h
 * Imported C++14 definitions for <memory>. 
 * 
 * Copyright Â© 2019 Gene Harvey
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file for details.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef CPP14_MEMORY
#define CPP14_MEMORY

#include <memory>

namespace cpp14
{
  using namespace std;
  
  // make_unique
  // Referencing:
  //   http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3656.htm
  
  namespace detail
  {
    template <class T>
    struct unique_if
    {
      using singular_type = std::unique_ptr<T>;
    };
  
    template <class T>
    struct unique_if<T[]>
    {
      using array_type = std::unique_ptr<T[]>;
    };
  
    template <class T, size_t N>
    struct unique_if<T[N]>
    {
      struct invalid_type
      { };
    };
  }
  
  template <class T, class... Args>
  typename detail::unique_if<T>::singular_type
  make_unique(Args&&... args)
  {
    return std::unique_ptr<T> (new T (std::forward<Args> (args)...));
  }
  
  template <class T>
  typename detail::unique_if<T>::array_type
  make_unique(size_t n)
  {
    using base_type = typename std::remove_extent<T>::type;
    return std::unique_ptr<T> (new base_type[n] ());
  }
  
  template<typename T, typename... Args>
  typename detail::unique_if<T>::invalid_type
  make_unique (Args&&...) = delete;
  
}

#endif
