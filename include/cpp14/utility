/** utility
 * Imported C++14 definitions for <utility>. 
 * 
 * Copyright Â© 2019 Gene Harvey
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file for details.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef CPP14_UTILITY
#define CPP14_UTILITY

#include <utility>
#include <type_traits>

namespace cpp14
{
  
  // std::exchange
  // Referencing:
  //   http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3668.html
  
  template <typename T, typename U = T>
  T exchange(T& obj, U&& new_val) 
  {
    T old_val = std::move(obj);
    obj = std::forward<U>(new_val);
    return old_val;
  }
  
  // std::integer_sequence
  // Referencing:
  //   http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3658.html
  
  template <class T, T... I>
  struct integer_sequence
  {
    typedef T value_type;
    static constexpr size_t size() noexcept { return sizeof...(I); }
  };
  
  template <class T, class U>
  constexpr T& get (std::pair<T, U>& p) noexcept
  {
    return std::get<0> (p);
  }
  
  template <class T, class U>
  constexpr const T& get (const std::pair<T, U>& p) noexcept
  {
    return std::get<0> (p);
  }
  
  template <class T, class U>
  constexpr T&& get (std::pair<T, U>&& p) noexcept
  {
    return std::get<0> (std::move (p));
  }
  
  template <class T, class U>
  constexpr T& get (std::pair<U, T>& p) noexcept
  {
    return std::get<1> (p);
  }
  
  template <class T, class U>
  constexpr const T& get (const std::pair<U, T>& p) noexcept
  {
    return std::get<1> (p);
  }
  
  template <class T, class U>
  constexpr T&& get (std::pair<U, T>&& p) noexcept
  {
    return std::get<1> (std::move (p));
  }
  
}

#endif
